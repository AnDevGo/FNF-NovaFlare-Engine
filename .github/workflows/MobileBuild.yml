name: MobileBuild
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    
  workflow_dispatch:
    inputs:
      dependencies_to_update:
        description: '输入 "all" 更新所有haxelib, 也可以输入单个或多个haxelib单独更新他们(e.g. "lime,openfl,flixel"),不输入即不给haxelib做任何更新'
        required: false
        default: ''

jobs:
  installHaxelib:
    uses: ./.github/workflows/InstallHaxelib.yml
     
  Android:
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Setup Haxe
        uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.7
          
      - name: cache Build
        uses: actions/cache@v3
        with:
          key: cache-build-Android
          path: |
            .haxelib/
            export/release/Android/haxe/
            export/release/Android/obj/
          restore-keys: |
            cache-build-Android
            
      - name: Install Libraries
        run: |
          haxelib setup ~/haxelib
          if [ "${{ github.event.inputs.dependencies_to_update }}" == "all" ]; then
            echo "Installing all dependencies..."
            haxelib install hmm 
            haxelib run hmm reinstall -f
          elif [ -n "${{ github.event.inputs.dependencies_to_update }}" ]; then
            echo "Updating specified dependencies: ${{ github.event.inputs.dependencies_to_update }}"
            haxelib install hmm
            haxelib run hmm reinstall $(echo "${{ github.event.inputs.dependencies_to_update }}" | tr -d ' ')
          else
            echo "No dependencies specified, only setting up haxelib"
          fi
          
      - name: Configure Android
        run: |
          haxelib run lime config ANDROID_SDK $ANDROID_HOME
          haxelib run lime config ANDROID_NDK_ROOT $ANDROID_NDK_LATEST_HOME
          haxelib run lime config JAVA_HOME $JAVA_HOME_17_arm64
          haxelib run lime config ANDROID_SETUP true
          
      - name: Compile
        run: haxelib run lime build android -ONLY_ARMV8
        
      - name: Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: androidBuild
          path: export/release/android/bin/app/build/outputs/apk/release/*.apk
          if-no-files-found: error

      - name: Clearing already existing cache
        uses: actions/github-script@v6
        with:
          script: |
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            for (const cache of caches.data.actions_caches) {
              if (cache.key == "cache-build-Android") {
                console.log('Clearing ' + cache.key + '...')
                await github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id,
                })
                console.log("Cache cleared.")
              }
            }
      - name: Uploading new cache
        uses: actions/cache@v3
        with:
          key: cache-build-Android
          path: |
            .haxelib/
            export/release/Android/haxe/
            export/release/Android/obj/
          restore-keys: |
            cache-build-Android
            
  iOS:
    runs-on: macos-15
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Setup Haxe
        uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.7

      - name: cache Build
        uses: actions/cache@v3
        with:
          key: cache-build-iOS
          path: |
            .haxelib/
            export/release/iOS/haxe/
            export/release/iOS/obj/
          restore-keys: |
            cache-build-iOS
            
      - name: Install Libraries
        run: |
          haxelib setup ~/haxelib
          if [ "${{ github.event.inputs.dependencies_to_update }}" == "all" ]; then
            echo "Installing all dependencies..."
            haxelib install hmm 
            haxelib run hmm reinstall -f
          elif [ -n "${{ github.event.inputs.dependencies_to_update }}" ]; then
            echo "Updating specified dependencies: ${{ github.event.inputs.dependencies_to_update }}"
            haxelib install hmm
            haxelib run hmm reinstall $(echo "${{ github.event.inputs.dependencies_to_update }}" | tr -d ' ')
          else
            echo "No dependencies specified, only setting up haxelib"
          fi

      - name: Compile
        run: haxelib run lime build ios -nosign
      
      - name: Make IPA And iOS Zip
        run: |
          cd export/release/ios/build/Release-iphoneos
          mkdir Payload
          mv *.app Payload
          zip -r NovaFlareEngine.ipa Payload
          zip -r iOSBuild.zip NovaFlareEngine.ipa

      - name: Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: iOSBuild
          path: export/release/ios/build/Release-iphoneos/*.ipa
          if-no-files-found: error

      - name: Clearing already existing cache
        uses: actions/github-script@v6
        with:
          script: |
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            for (const cache of caches.data.actions_caches) {
              if (cache.key == "cache-build-iOS") {
                console.log('Clearing ' + cache.key + '...')
                await github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id,
                })
                console.log("Cache cleared.")
              }
            }
      - name: Uploading new cache
        uses: actions/cache@v3
        with:
          key: cache-build-iOS
          path: |
            .haxelib/
            export/release/iOS/haxe/
            export/release/iOS/obj/
          restore-keys: |
            cache-build-iOS