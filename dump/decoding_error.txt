[{
	access: [APrivate]
	doc: null
	kind: FVar(TPath({
		name: ScriptClassInstance
		pack: [crowplexus, hscript, scriptclass]
		params: []
		sub: null
	}), null)
	meta: null
	name: __sc_standClass
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: __sc_standClass
			opt: null
			type: TPath({
				name: ScriptClassInstance
				pack: [crowplexus, hscript, scriptclass]
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, __sc_standClass, Normal)
					pos: #pos
				}, {
					expr: EConst(CIdent(__sc_standClass))
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EField({
							expr: EConst(CIdent(this))
							pos: #pos
						}, __sc_standClass, Normal)
						pos: #pos
					}, superClass, Normal)
					pos: #pos
				}, {
					expr: EConst(CIdent(this))
					pos: #pos
				})
				pos: #pos
			}, {
				expr: ECall({
					expr: EConst(CIdent(super))
					pos: #pos
				}, [])
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: null
	name: new
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(create, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(create, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, create, Normal)
							pos: #pos
						}, [])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: create
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(draw, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(draw, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, draw, Normal)
							pos: #pos
						}, [])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: draw
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: SubState
			opt: null
			type: TPath({
				name: FlxSubState
				pack: [flixel]
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(openSubState, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(openSubState, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(SubState))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, openSubState, Normal)
							pos: #pos
						}, [{
							expr: EConst(CIdent(SubState))
							pos: #pos
						}])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: openSubState
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(closeSubState, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(closeSubState, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, closeSubState, Normal)
							pos: #pos
						}, [])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: closeSubState
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(resetSubState, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(resetSubState, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, resetSubState, Normal)
							pos: #pos
						}, [])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: resetSubState
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(destroy, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(destroy, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, destroy, Normal)
							pos: #pos
						}, [])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: destroy
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: nextState
			opt: null
			type: TPath({
				name: FlxState
				pack: [flixel]
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(switchTo, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(switchTo, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(nextState))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, switchTo, Normal)
								pos: #pos
							}, [{
								expr: EConst(CIdent(nextState))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: switchTo
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: onOutroComplete
			opt: null
			type: TFunction([], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Void
			}))
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(startOutro, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(startOutro, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(onOutroComplete))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, startOutro, Normal)
							pos: #pos
						}, [{
							expr: EConst(CIdent(onOutroComplete))
							pos: #pos
						}])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: startOutro
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(onFocusLost, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(onFocusLost, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, onFocusLost, Normal)
							pos: #pos
						}, [])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: onFocusLost
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(onFocus, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(onFocus, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, onFocus, Normal)
							pos: #pos
						}, [])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: onFocus
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: Width
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Int
			})
			value: null
		}, {
			meta: null
			name: Height
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Int
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(onResize, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(onResize, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(Width))
											pos: #pos
										}, {
											expr: EConst(CIdent(Height))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, onResize, Normal)
							pos: #pos
						}, [{
							expr: EConst(CIdent(Width))
							pos: #pos
						}, {
							expr: EConst(CIdent(Height))
							pos: #pos
						}])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: onResize
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: elapsed
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Float
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(tryUpdate, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(tryUpdate, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(elapsed))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, tryUpdate, Normal)
							pos: #pos
						}, [{
							expr: EConst(CIdent(elapsed))
							pos: #pos
						}])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: tryUpdate
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(get_bgColor, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(get_bgColor, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, get_bgColor, Normal)
								pos: #pos
							}, [])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: get_bgColor
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: Value
			opt: null
			type: TPath({
				name: FlxColor
				pack: [flixel, util]
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(set_bgColor, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(set_bgColor, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(Value))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, set_bgColor, Normal)
								pos: #pos
							}, [{
								expr: EConst(CIdent(Value))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: set_bgColor
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(get_subStateOpened, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(get_subStateOpened, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, get_subStateOpened, Normal)
								pos: #pos
							}, [])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: get_subStateOpened
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(get_subStateClosed, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(get_subStateClosed, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, get_subStateClosed, Normal)
								pos: #pos
							}, [])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: get_subStateClosed
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: member
			opt: null
			type: TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(onMemberAdd, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(onMemberAdd, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(member))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, onMemberAdd, Normal)
							pos: #pos
						}, [{
							expr: EConst(CIdent(member))
							pos: #pos
						}])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: onMemberAdd
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: member
			opt: null
			type: TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(onMemberRemove, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(onMemberRemove, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(member))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, onMemberRemove, Normal)
							pos: #pos
						}, [{
							expr: EConst(CIdent(member))
							pos: #pos
						}])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: onMemberRemove
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: elapsed
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Float
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(update, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(update, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(elapsed))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, update, Normal)
							pos: #pos
						}, [{
							expr: EConst(CIdent(elapsed))
							pos: #pos
						}])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: update
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: basic
			opt: null
			type: TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(add, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(add, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(basic))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, add, Normal)
								pos: #pos
							}, [{
								expr: EConst(CIdent(basic))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: add
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: position
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Int
			})
			value: null
		}, {
			meta: null
			name: object
			opt: null
			type: TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(insert, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(insert, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(position))
											pos: #pos
										}, {
											expr: EConst(CIdent(object))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, insert, Normal)
								pos: #pos
							}, [{
								expr: EConst(CIdent(position))
								pos: #pos
							}, {
								expr: EConst(CIdent(object))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: insert
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: objectClass
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: [TPType(TPath({
					name: Class
					pack: []
					params: [TPType(TPath({
						name: T
						pack: []
						params: []
						sub: null
					}))]
					sub: null
				}))]
				sub: Null
			})
			value: {
				expr: EConst(CIdent(null))
				pos: #pos
			}
		}, {
			meta: null
			name: objectFactory
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: [TPType(TFunction([], TPath({
					name: T
					pack: []
					params: []
					sub: null
				})))]
				sub: Null
			})
			value: {
				expr: EConst(CIdent(null))
				pos: #pos
			}
		}, {
			meta: null
			name: force
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: {
				expr: EConst(CIdent(false))
				pos: #pos
			}
		}, {
			meta: null
			name: revive
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: {
				expr: EConst(CIdent(true))
				pos: #pos
			}
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(recycle, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(recycle, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(objectClass))
											pos: #pos
										}, {
											expr: EConst(CIdent(objectFactory))
											pos: #pos
										}, {
											expr: EConst(CIdent(force))
											pos: #pos
										}, {
											expr: EConst(CIdent(revive))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, recycle, Normal)
								pos: #pos
							}, [{
								expr: EConst(CIdent(objectClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(objectFactory))
								pos: #pos
							}, {
								expr: EConst(CIdent(force))
								pos: #pos
							}, {
								expr: EConst(CIdent(revive))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: recycle
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: basic
			opt: null
			type: TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})
			value: null
		}, {
			meta: null
			name: splice
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: {
				expr: EConst(CIdent(false))
				pos: #pos
			}
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(remove, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(remove, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(basic))
											pos: #pos
										}, {
											expr: EConst(CIdent(splice))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, remove, Normal)
								pos: #pos
							}, [{
								expr: EConst(CIdent(basic))
								pos: #pos
							}, {
								expr: EConst(CIdent(splice))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: remove
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: oldObject
			opt: null
			type: TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})
			value: null
		}, {
			meta: null
			name: newObject
			opt: null
			type: TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(replace, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(replace, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(oldObject))
											pos: #pos
										}, {
											expr: EConst(CIdent(newObject))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, replace, Normal)
								pos: #pos
							}, [{
								expr: EConst(CIdent(oldObject))
								pos: #pos
							}, {
								expr: EConst(CIdent(newObject))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: replace
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: func
			opt: null
			type: TFunction([TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			}))
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(getFirst, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(getFirst, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(func))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, getFirst, Normal)
								pos: #pos
							}, [{
								expr: EConst(CIdent(func))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: getFirst
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: func
			opt: null
			type: TFunction([TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			}))
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(getLast, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(getLast, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(func))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, getLast, Normal)
								pos: #pos
							}, [{
								expr: EConst(CIdent(func))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: getLast
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: func
			opt: null
			type: TFunction([TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			}))
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(getFirstIndex, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(getFirstIndex, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(func))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, getFirstIndex, Normal)
								pos: #pos
							}, [{
								expr: EConst(CIdent(func))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: getFirstIndex
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: func
			opt: null
			type: TFunction([TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			}))
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(getLastIndex, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(getLastIndex, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(func))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, getLastIndex, Normal)
								pos: #pos
							}, [{
								expr: EConst(CIdent(func))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: getLastIndex
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: func
			opt: null
			type: TFunction([TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			}))
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(any, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(any, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(func))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, any, Normal)
								pos: #pos
							}, [{
								expr: EConst(CIdent(func))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: any
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: func
			opt: null
			type: TFunction([TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			}))
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(every, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(every, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(func))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, every, Normal)
								pos: #pos
							}, [{
								expr: EConst(CIdent(func))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: every
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: objectClass
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: [TPType(TPath({
					name: Class
					pack: []
					params: [TPType(TPath({
						name: T
						pack: []
						params: []
						sub: null
					}))]
					sub: null
				}))]
				sub: Null
			})
			value: {
				expr: EConst(CIdent(null))
				pos: #pos
			}
		}, {
			meta: null
			name: force
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: {
				expr: EConst(CIdent(false))
				pos: #pos
			}
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(getFirstAvailable, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(getFirstAvailable, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(objectClass))
											pos: #pos
										}, {
											expr: EConst(CIdent(force))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, getFirstAvailable, Normal)
								pos: #pos
							}, [{
								expr: EConst(CIdent(objectClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(force))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: getFirstAvailable
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(getFirstNull, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(getFirstNull, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, getFirstNull, Normal)
								pos: #pos
							}, [])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: getFirstNull
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(getFirstExisting, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(getFirstExisting, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, getFirstExisting, Normal)
								pos: #pos
							}, [])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: getFirstExisting
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(getFirstAlive, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(getFirstAlive, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, getFirstAlive, Normal)
								pos: #pos
							}, [])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: getFirstAlive
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(getFirstDead, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(getFirstDead, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, getFirstDead, Normal)
								pos: #pos
							}, [])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: getFirstDead
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(countLiving, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(countLiving, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, countLiving, Normal)
								pos: #pos
							}, [])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: countLiving
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(countDead, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(countDead, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, countDead, Normal)
								pos: #pos
							}, [])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: countDead
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: startIndex
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Int
			})
			value: {
				expr: EConst(CInt(0, null))
				pos: #pos
			}
		}, {
			meta: null
			name: length
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Int
			})
			value: {
				expr: EConst(CInt(0, null))
				pos: #pos
			}
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(getRandom, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(getRandom, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(startIndex))
											pos: #pos
										}, {
											expr: EConst(CIdent(length))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, getRandom, Normal)
								pos: #pos
							}, [{
								expr: EConst(CIdent(startIndex))
								pos: #pos
							}, {
								expr: EConst(CIdent(length))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: getRandom
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(clear, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(clear, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, clear, Normal)
							pos: #pos
						}, [])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: clear
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(killMembers, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(killMembers, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, killMembers, Normal)
							pos: #pos
						}, [])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: killMembers
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(kill, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(kill, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, kill, Normal)
							pos: #pos
						}, [])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: kill
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(reviveMembers, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(reviveMembers, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, reviveMembers, Normal)
							pos: #pos
						}, [])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: reviveMembers
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(revive, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(revive, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, revive, Normal)
							pos: #pos
						}, [])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: revive
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: func
			opt: null
			type: TFunction([TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Void
			}))
			value: null
		}, {
			meta: null
			name: recurse
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: {
				expr: EConst(CIdent(false))
				pos: #pos
			}
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(forEach, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(forEach, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(func))
											pos: #pos
										}, {
											expr: EConst(CIdent(recurse))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, forEach, Normal)
							pos: #pos
						}, [{
							expr: EConst(CIdent(func))
							pos: #pos
						}, {
							expr: EConst(CIdent(recurse))
							pos: #pos
						}])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: forEach
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: func
			opt: null
			type: TFunction([TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Void
			}))
			value: null
		}, {
			meta: null
			name: recurse
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: {
				expr: EConst(CIdent(false))
				pos: #pos
			}
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(forEachAlive, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(forEachAlive, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(func))
											pos: #pos
										}, {
											expr: EConst(CIdent(recurse))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, forEachAlive, Normal)
							pos: #pos
						}, [{
							expr: EConst(CIdent(func))
							pos: #pos
						}, {
							expr: EConst(CIdent(recurse))
							pos: #pos
						}])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: forEachAlive
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: func
			opt: null
			type: TFunction([TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Void
			}))
			value: null
		}, {
			meta: null
			name: recurse
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: {
				expr: EConst(CIdent(false))
				pos: #pos
			}
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(forEachDead, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(forEachDead, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(func))
											pos: #pos
										}, {
											expr: EConst(CIdent(recurse))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, forEachDead, Normal)
							pos: #pos
						}, [{
							expr: EConst(CIdent(func))
							pos: #pos
						}, {
							expr: EConst(CIdent(recurse))
							pos: #pos
						}])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: forEachDead
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: func
			opt: null
			type: TFunction([TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Void
			}))
			value: null
		}, {
			meta: null
			name: recurse
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: {
				expr: EConst(CIdent(false))
				pos: #pos
			}
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(forEachExists, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(forEachExists, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(func))
											pos: #pos
										}, {
											expr: EConst(CIdent(recurse))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, forEachExists, Normal)
							pos: #pos
						}, [{
							expr: EConst(CIdent(func))
							pos: #pos
						}, {
							expr: EConst(CIdent(recurse))
							pos: #pos
						}])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: forEachExists
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: objectClass
			opt: null
			type: TPath({
				name: Class
				pack: []
				params: [TPType(TPath({
					name: K
					pack: []
					params: []
					sub: null
				}))]
				sub: null
			})
			value: null
		}, {
			meta: null
			name: func
			opt: null
			type: TFunction([null <- expected enum value], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Void
			}))
			value: null
		}, {
			meta: null
			name: recurse
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: {
				expr: EConst(CIdent(false))
				pos: #pos
			}
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(forEachOfType, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(forEachOfType, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(objectClass))
											pos: #pos
										}, {
											expr: EConst(CIdent(func))
											pos: #pos
										}, {
											expr: EConst(CIdent(recurse))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(super))
								pos: #pos
							}, forEachOfType, Normal)
							pos: #pos
						}, [{
							expr: EConst(CIdent(objectClass))
							pos: #pos
						}, {
							expr: EConst(CIdent(func))
							pos: #pos
						}, {
							expr: EConst(CIdent(recurse))
							pos: #pos
						}])
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: [{
			constraints: null
			defaultType: null
			meta: null
			name: K
			params: null
		}]
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: forEachOfType
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: size
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Int
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(set_maxSize, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(set_maxSize, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(size))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, set_maxSize, Normal)
								pos: #pos
							}, [{
								expr: EConst(CIdent(size))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: set_maxSize
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(get_memberAdded, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(get_memberAdded, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, get_memberAdded, Normal)
								pos: #pos
							}, [])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: get_memberAdded
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(get_memberRemoved, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(get_memberRemoved, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, get_memberRemoved, Normal)
								pos: #pos
							}, [])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: get_memberRemoved
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(toString, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(toString, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, toString, Normal)
								pos: #pos
							}, [])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: toString
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: Value
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(set_visible, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(set_visible, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(Value))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, set_visible, Normal)
								pos: #pos
							}, [{
								expr: EConst(CIdent(Value))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: set_visible
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: Value
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(set_active, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(set_active, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(Value))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, set_active, Normal)
								pos: #pos
							}, [{
								expr: EConst(CIdent(Value))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: set_active
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: Value
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(set_exists, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(set_exists, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(Value))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, set_exists, Normal)
								pos: #pos
							}, [{
								expr: EConst(CIdent(Value))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: set_exists
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: Value
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(set_alive, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(set_alive, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(Value))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, set_alive, Normal)
								pos: #pos
							}, [{
								expr: EConst(CIdent(Value))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: set_alive
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(get_camera, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(get_camera, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, get_camera, Normal)
								pos: #pos
							}, [])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: get_camera
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: Value
			opt: null
			type: TPath({
				name: FlxCamera
				pack: [flixel]
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(set_camera, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(set_camera, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(Value))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, set_camera, Normal)
								pos: #pos
							}, [{
								expr: EConst(CIdent(Value))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: set_camera
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(getCameras, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(getCameras, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, getCameras, Normal)
								pos: #pos
							}, [])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: getCameras
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(getCamerasLegacy, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(getCamerasLegacy, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, getCamerasLegacy, Normal)
								pos: #pos
							}, [])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: getCamerasLegacy
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(get_cameras, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(get_cameras, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, get_cameras, Normal)
								pos: #pos
							}, [])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: get_cameras
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: Value
			opt: null
			type: TPath({
				name: Array
				pack: []
				params: [TPType(TPath({
					name: FlxCamera
					pack: [flixel]
					params: []
					sub: null
				}))]
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(set_cameras, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(set_cameras, null))
										pos: #pos
									}, {
										expr: EArrayDecl([{
											expr: EConst(CIdent(Value))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, set_cameras, Normal)
								pos: #pos
							}, [{
								expr: EConst(CIdent(Value))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: set_cameras
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EMeta({
					name: :privateAccess
					params: []
					pos: #pos
				}, {
					expr: EIf({
						expr: EBinop(OpBoolAnd, {
							expr: EBinop(OpNotEq, {
								expr: EConst(CIdent(__sc_standClass))
								pos: #pos
							}, {
								expr: EConst(CIdent(null))
								pos: #pos
							})
							pos: #pos
						}, {
							expr: ECall({
								expr: EField({
									expr: EField({
										expr: EConst(CIdent(__sc_standClass))
										pos: #pos
									}, overrides, Normal)
									pos: #pos
								}, contains, Normal)
								pos: #pos
							}, [{
								expr: EConst(CString(get_container, null))
								pos: #pos
							}])
							pos: #pos
						})
						pos: #pos
					}, {
						expr: EBlock([{
							expr: EVars([{
								expr: {
									expr: ECall({
										expr: EField({
											expr: EConst(CIdent(__sc_standClass))
											pos: #pos
										}, sc_call, Normal)
										pos: #pos
									}, [{
										expr: EConst(CString(get_container, null))
										pos: #pos
									}, {
										expr: EArrayDecl([])
										pos: #pos
									}])
									pos: #pos
								}
								isFinal: false
								isStatic: false
								meta: []
								name: result
								namePos: #pos
								type: null
							}])
							pos: #pos
						}, {
							expr: EReturn({
								expr: ECast({
									expr: EConst(CIdent(result))
									pos: #pos
								}, null)
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}, {
						expr: EReturn({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(super))
									pos: #pos
								}, get_container, Normal)
								pos: #pos
							}, [])
							pos: #pos
						})
						pos: #pos
					})
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: get_container
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, create, Normal)
				pos: #pos
			}, [])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_create
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, draw, Normal)
				pos: #pos
			}, [])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_draw
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: SubState
			opt: null
			type: TPath({
				name: FlxSubState
				pack: [flixel]
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, openSubState, Normal)
				pos: #pos
			}, [{
				expr: EConst(CIdent(SubState))
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_openSubState
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, closeSubState, Normal)
				pos: #pos
			}, [])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_closeSubState
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, resetSubState, Normal)
				pos: #pos
			}, [])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_resetSubState
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, destroy, Normal)
				pos: #pos
			}, [])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_destroy
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: nextState
			opt: null
			type: TPath({
				name: FlxState
				pack: [flixel]
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, switchTo, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(nextState))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_switchTo
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: onOutroComplete
			opt: null
			type: TFunction([], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Void
			}))
			value: null
		}]
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, startOutro, Normal)
				pos: #pos
			}, [{
				expr: EConst(CIdent(onOutroComplete))
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_startOutro
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, onFocusLost, Normal)
				pos: #pos
			}, [])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_onFocusLost
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, onFocus, Normal)
				pos: #pos
			}, [])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_onFocus
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: Width
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Int
			})
			value: null
		}, {
			meta: null
			name: Height
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Int
			})
			value: null
		}]
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, onResize, Normal)
				pos: #pos
			}, [{
				expr: EConst(CIdent(Width))
				pos: #pos
			}, {
				expr: EConst(CIdent(Height))
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_onResize
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: elapsed
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Float
			})
			value: null
		}]
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, tryUpdate, Normal)
				pos: #pos
			}, [{
				expr: EConst(CIdent(elapsed))
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_tryUpdate
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, get_bgColor, Normal)
					pos: #pos
				}, [])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_get_bgColor
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: Value
			opt: null
			type: TPath({
				name: FlxColor
				pack: [flixel, util]
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, set_bgColor, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(Value))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_set_bgColor
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, get_subStateOpened, Normal)
					pos: #pos
				}, [])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_get_subStateOpened
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, get_subStateClosed, Normal)
					pos: #pos
				}, [])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_get_subStateClosed
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: member
			opt: null
			type: TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, onMemberAdd, Normal)
				pos: #pos
			}, [{
				expr: EConst(CIdent(member))
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_onMemberAdd
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: member
			opt: null
			type: TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, onMemberRemove, Normal)
				pos: #pos
			}, [{
				expr: EConst(CIdent(member))
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_onMemberRemove
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: elapsed
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Float
			})
			value: null
		}]
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, update, Normal)
				pos: #pos
			}, [{
				expr: EConst(CIdent(elapsed))
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_update
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: basic
			opt: null
			type: TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, add, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(basic))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_add
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: position
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Int
			})
			value: null
		}, {
			meta: null
			name: object
			opt: null
			type: TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, insert, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(position))
					pos: #pos
				}, {
					expr: EConst(CIdent(object))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_insert
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: objectClass
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: [TPType(TPath({
					name: Class
					pack: []
					params: [TPType(TPath({
						name: T
						pack: []
						params: []
						sub: null
					}))]
					sub: null
				}))]
				sub: Null
			})
			value: {
				expr: EConst(CIdent(null))
				pos: #pos
			}
		}, {
			meta: null
			name: objectFactory
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: [TPType(TFunction([], TPath({
					name: T
					pack: []
					params: []
					sub: null
				})))]
				sub: Null
			})
			value: {
				expr: EConst(CIdent(null))
				pos: #pos
			}
		}, {
			meta: null
			name: force
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: {
				expr: EConst(CIdent(false))
				pos: #pos
			}
		}, {
			meta: null
			name: revive
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: {
				expr: EConst(CIdent(true))
				pos: #pos
			}
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, recycle, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(objectClass))
					pos: #pos
				}, {
					expr: EConst(CIdent(objectFactory))
					pos: #pos
				}, {
					expr: EConst(CIdent(force))
					pos: #pos
				}, {
					expr: EConst(CIdent(revive))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_recycle
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: basic
			opt: null
			type: TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})
			value: null
		}, {
			meta: null
			name: splice
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: {
				expr: EConst(CIdent(false))
				pos: #pos
			}
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, remove, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(basic))
					pos: #pos
				}, {
					expr: EConst(CIdent(splice))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_remove
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: oldObject
			opt: null
			type: TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})
			value: null
		}, {
			meta: null
			name: newObject
			opt: null
			type: TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, replace, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(oldObject))
					pos: #pos
				}, {
					expr: EConst(CIdent(newObject))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_replace
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: func
			opt: null
			type: TFunction([TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			}))
			value: null
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, getFirst, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(func))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_getFirst
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: func
			opt: null
			type: TFunction([TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			}))
			value: null
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, getLast, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(func))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_getLast
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: func
			opt: null
			type: TFunction([TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			}))
			value: null
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, getFirstIndex, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(func))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_getFirstIndex
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: func
			opt: null
			type: TFunction([TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			}))
			value: null
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, getLastIndex, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(func))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_getLastIndex
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: func
			opt: null
			type: TFunction([TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			}))
			value: null
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, any, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(func))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_any
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: func
			opt: null
			type: TFunction([TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			}))
			value: null
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, every, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(func))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_every
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: objectClass
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: [TPType(TPath({
					name: Class
					pack: []
					params: [TPType(TPath({
						name: T
						pack: []
						params: []
						sub: null
					}))]
					sub: null
				}))]
				sub: Null
			})
			value: {
				expr: EConst(CIdent(null))
				pos: #pos
			}
		}, {
			meta: null
			name: force
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: {
				expr: EConst(CIdent(false))
				pos: #pos
			}
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, getFirstAvailable, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(objectClass))
					pos: #pos
				}, {
					expr: EConst(CIdent(force))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_getFirstAvailable
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, getFirstNull, Normal)
					pos: #pos
				}, [])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_getFirstNull
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, getFirstExisting, Normal)
					pos: #pos
				}, [])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_getFirstExisting
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, getFirstAlive, Normal)
					pos: #pos
				}, [])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_getFirstAlive
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, getFirstDead, Normal)
					pos: #pos
				}, [])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_getFirstDead
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, countLiving, Normal)
					pos: #pos
				}, [])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_countLiving
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, countDead, Normal)
					pos: #pos
				}, [])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_countDead
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: startIndex
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Int
			})
			value: {
				expr: EConst(CInt(0, null))
				pos: #pos
			}
		}, {
			meta: null
			name: length
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Int
			})
			value: {
				expr: EConst(CInt(0, null))
				pos: #pos
			}
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, getRandom, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(startIndex))
					pos: #pos
				}, {
					expr: EConst(CIdent(length))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_getRandom
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, clear, Normal)
				pos: #pos
			}, [])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_clear
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, killMembers, Normal)
				pos: #pos
			}, [])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_killMembers
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, kill, Normal)
				pos: #pos
			}, [])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_kill
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, reviveMembers, Normal)
				pos: #pos
			}, [])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_reviveMembers
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, revive, Normal)
				pos: #pos
			}, [])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_revive
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: func
			opt: null
			type: TFunction([TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Void
			}))
			value: null
		}, {
			meta: null
			name: recurse
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: {
				expr: EConst(CIdent(false))
				pos: #pos
			}
		}]
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, forEach, Normal)
				pos: #pos
			}, [{
				expr: EConst(CIdent(func))
				pos: #pos
			}, {
				expr: EConst(CIdent(recurse))
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_forEach
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: func
			opt: null
			type: TFunction([TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Void
			}))
			value: null
		}, {
			meta: null
			name: recurse
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: {
				expr: EConst(CIdent(false))
				pos: #pos
			}
		}]
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, forEachAlive, Normal)
				pos: #pos
			}, [{
				expr: EConst(CIdent(func))
				pos: #pos
			}, {
				expr: EConst(CIdent(recurse))
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_forEachAlive
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: func
			opt: null
			type: TFunction([TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Void
			}))
			value: null
		}, {
			meta: null
			name: recurse
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: {
				expr: EConst(CIdent(false))
				pos: #pos
			}
		}]
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, forEachDead, Normal)
				pos: #pos
			}, [{
				expr: EConst(CIdent(func))
				pos: #pos
			}, {
				expr: EConst(CIdent(recurse))
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_forEachDead
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: func
			opt: null
			type: TFunction([TPath({
				name: FlxBasic
				pack: [flixel]
				params: []
				sub: null
			})], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Void
			}))
			value: null
		}, {
			meta: null
			name: recurse
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: {
				expr: EConst(CIdent(false))
				pos: #pos
			}
		}]
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, forEachExists, Normal)
				pos: #pos
			}, [{
				expr: EConst(CIdent(func))
				pos: #pos
			}, {
				expr: EConst(CIdent(recurse))
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_forEachExists
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: objectClass
			opt: null
			type: TPath({
				name: Class
				pack: []
				params: [TPType(TPath({
					name: K
					pack: []
					params: []
					sub: null
				}))]
				sub: null
			})
			value: null
		}, {
			meta: null
			name: func
			opt: null
			type: TFunction([null <- expected enum value], TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Void
			}))
			value: null
		}, {
			meta: null
			name: recurse
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: {
				expr: EConst(CIdent(false))
				pos: #pos
			}
		}]
		expr: {
			expr: ECall({
				expr: EField({
					expr: EConst(CIdent(super))
					pos: #pos
				}, forEachOfType, Normal)
				pos: #pos
			}, [{
				expr: EConst(CIdent(objectClass))
				pos: #pos
			}, {
				expr: EConst(CIdent(func))
				pos: #pos
			}, {
				expr: EConst(CIdent(recurse))
				pos: #pos
			}])
			pos: #pos
		}
		params: [{
			constraints: null
			defaultType: null
			meta: null
			name: K
			params: null
		}]
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_forEachOfType
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: size
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Int
			})
			value: null
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, set_maxSize, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(size))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_set_maxSize
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, get_memberAdded, Normal)
					pos: #pos
				}, [])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_get_memberAdded
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, get_memberRemoved, Normal)
					pos: #pos
				}, [])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_get_memberRemoved
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, toString, Normal)
					pos: #pos
				}, [])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_toString
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: Value
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: null
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, set_visible, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(Value))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_set_visible
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: Value
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: null
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, set_active, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(Value))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_set_active
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: Value
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: null
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, set_exists, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(Value))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_set_exists
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: Value
			opt: null
			type: TPath({
				name: StdTypes
				pack: []
				params: []
				sub: Bool
			})
			value: null
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, set_alive, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(Value))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_set_alive
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, get_camera, Normal)
					pos: #pos
				}, [])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_get_camera
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: Value
			opt: null
			type: TPath({
				name: FlxCamera
				pack: [flixel]
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, set_camera, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(Value))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_set_camera
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, getCameras, Normal)
					pos: #pos
				}, [])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_getCameras
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, getCamerasLegacy, Normal)
					pos: #pos
				}, [])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_getCamerasLegacy
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, get_cameras, Normal)
					pos: #pos
				}, [])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_get_cameras
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: Value
			opt: null
			type: TPath({
				name: Array
				pack: []
				params: [TPType(TPath({
					name: FlxCamera
					pack: [flixel]
					params: []
					sub: null
				}))]
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, set_cameras, Normal)
					pos: #pos
				}, [{
					expr: EConst(CIdent(Value))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_set_cameras
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, get_container, Normal)
					pos: #pos
				}, [])
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :untyped
		params: null
		pos: #pos
	}]
	name: __SC_SUPER_get_container
	pos: #pos
}]
line 5579: expected enum value
line 9359: expected enum value